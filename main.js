const { Client, Intents } = require('discord.js-selfbot-v13');
const express = require('express');
const app = express();
const PORT = 8080;

// Konfiguracja klienta Discord
const client = new Client({
  checkUpdate: false,
});

// Serwer HTTP do utrzymania aktywno≈õci na Render (dla darmowego tieru)
app.get('/', (req, res) => {
  res.send('Self-bot dzia≈Ça na Render! üöÄ');
});

app.listen(PORT, () => {
  console.log(`Serwer pingujƒÖcy dzia≈Ça na porcie ${PORT}`);
});

// Obs≈Çuga zdarze≈Ñ Discorda
client.once('ready', () => {
  console.log(`Zalogowano jako ${client.user.tag}!`);
});

// Reklama serwera
const serverAd = `
**Jeste≈õ do≈õwiadczonym programistƒÖ i szukasz forum, gdzie uzyskasz wsparcie i podzielisz siƒô efektem swojej pracy? A mo≈ºe dopiero zaczynasz swojƒÖ przygodƒô z kodowaniem? Niezale≈ºnie od stopnia zaawansowania zapraszamy na nasz serwer programistyczny.**

Co oferujemy:
- pomoc programistycznƒÖ,
- kana≈Çy dostosowane do r√≥≈ºnych jƒôzyk√≥w programistycznych,
- sklep z itemami,
- miejsce, gdzie znajdziesz ludzi z pasjƒÖ,
- sta≈Çy rozw√≥j serwera.

Kogo szukamy:
- programist√≥w,
- administracji,
- aktywnych u≈ºytkownik√≥w,
- realizator√≥w partnerstw.
https://discord.gg/9ZbKzvS4QE
https://share.creavite.co/67646e7f0ae0e4f686a629f9.gif
https://share.creavite.co/67646f950ae0e4f686a62a01.gif
`;

// Lista u≈ºytkownik√≥w partnerstwa i ich czas ostatniego partnerstwa
const partneringUsers = new Map();
const partnershipTimestamps = new Map();

client.once('ready', () => {
  console.log(`Bot ${client.user.tag} jest gotowy.`);
  // Wysy≈Çanie wiadomo≈õci co 6 minut
  const channelId_partnerstwa = '1252280791946235915';
  const serverId = '1175916293816332318';
  setInterval(async () => {
    const channel = client.channels.cache.get(channelId_partnerstwa);
    if (channel) {
      await channel.send('# PARTNERSTWA PV');
    } else {
      console.error(`Nie znaleziono kana≈Çu o ID ${channelId_partnerstwa}`);
    }
  }, 6 * 60 * 1000); // 6 minut w milisekundach

  // reklamowanie serwera
  const channelId_programming = '1252290252328927353';
  const channelId_global = '1252285992396918835'
  setInterval(async () => {
    const channel = client.channels.cache.get(channelId_programming);
    const channel_global = client.channels.cache.get(channelId_global);
    if (channel) {
      await channel.send(serverAd);
      await channel_global.send(serverAd);
    } else {
      console.error(`Nie znaleziono kana≈Çu o ID ${channelId_programming}`);
    }
  }, 11 * 60 * 1000); // 11 minut w milisekundach
});

client.on('messageCreate', async (message) => {
  // Sprawdzenie, czy wiadomo≈õƒá pochodzi od innego u≈ºytkownika
  if (!message.guild && !message.author.bot && message.author.id !== client.user.id) {
    const now = Date.now();
    const lastPartnership = partnershipTimestamps.get(message.author.id);

    if (lastPartnership && now - lastPartnership < 7 * 24 * 60 * 60 * 1000) {
      // Je≈õli u≈ºytkownik chce nawiƒÖzaƒá partnerstwo wcze≈õniej ni≈º tydzie≈Ñ, wy≈õlij wiadomo≈õƒá
      await message.channel.send("‚è≥ Musisz jeszcze poczekaƒá, zanim bƒôdziesz m√≥g≈Ç nawiƒÖzaƒá kolejne partnerstwo. Spr√≥buj ponownie za tydzie≈Ñ.");
      return;
    }

    if (!partneringUsers.has(message.author.id)) {
      partneringUsers.set(message.author.id, null);
      await message.channel.send("üåé Je≈õli chcesz nawiƒÖzaƒá partnerstwo, wy≈õlij swojƒÖ reklamƒô (maksymalnie 1 serwer).");
    } else {
      const userAd = partneringUsers.get(message.author.id);

      if (userAd === null) {
        partneringUsers.set(message.author.id, message.content);
        await message.channel.send(`‚úÖ Wstaw naszƒÖ reklamƒô:\n${serverAd}`);
        await message.channel.send("‚è∞ Daj znaƒá, gdy wstawisz reklamƒô!");
      } else if (message.content.toLowerCase().includes('wstawi') || message.content.toLowerCase().includes('ju≈º') || message.content.toLowerCase().includes('gotowe') || message.content.toLowerCase().includes('juz')) {
        await message.channel.send("‚ùî Czy wymagane jest do≈ÇƒÖczenie na serwer? Odpowiedz 'tak' lub 'nie'.");

        const filter = response => {
          return response.author.id === message.author.id && response.channel.id === message.channel.id;
        };

        const collected = await message.channel.awaitMessages({ filter, max: 1, time: 60000, errors: ['time'] })
          .catch(() => null);

        if (collected) {
          const userResponse = collected.first().content.toLowerCase();
          if (!userResponse.includes('nie')) {
            const linkPattern = /(https:\/\/discord\.gg\/[^\s]+)/g;
            const link = userAd.match(linkPattern);

            if (link) {
              try {
                const response = await axios.get(link[0]);
                if (response.status === 200) {
                  await message.channel.send("‚úÖ Bot do≈ÇƒÖczy≈Ç do serwera!");
                } else {
                  await message.channel.send("‚ùå Nie uda≈Ço siƒô do≈ÇƒÖczyƒá do serwera.");
                }
              } catch (error) {
                await message.channel.send(`‚ùå WystƒÖpi≈Ç b≈ÇƒÖd przy do≈ÇƒÖczaniu do serwera: ${error.message}`);
              }
            } else {
              await message.channel.send("‚ùå Nie znaleziono poprawnego linku do serwera.");
            }
          } else {
            await message.channel.send("üõë Pominiƒôto do≈ÇƒÖczanie do serwera.");
          }
        }
      }
    }
  }
});

// Obs≈Çuga zdarze≈Ñ, kiedy u≈ºytkownik do≈ÇƒÖcza na serwer
client.on('guildMemberAdd', async (member) => {
  // Sprawd≈∫, czy u≈ºytkownik znajduje siƒô w mapie partneringUsers
  if (partneringUsers.has(member.id)) {
    // Wy≈õlij wiadomo≈õƒá powitalnƒÖ lub dalsze instrukcje do u≈ºytkownika
    const userAd = partneringUsers.get(member.id);
    const channel = member.guild.channels.cache.find(ch => ch.name === 'üíº„Éªpartnerstwa' && ch.isText());
    if (channel) {
      const displayName = member.displayName;
      await channel.send(`${userAd}\n\nPartnerstwo z: ${member}`);
      const dmChannel = await member.createDM();
      await dmChannel.send("‚úÖ Dziƒôkujemy za do≈ÇƒÖczenie! Twoja reklama zosta≈Ça wstawiona.");
      // Usu≈Ñ u≈ºytkownika z mapy partneringUsers
      partneringUsers.delete(member.id);
      // Zaktualizuj czas ostatniego partnerstwa
      const now = Date.now();
      partnershipTimestamps.set(member.id, now);
    } else {
      console.error("Nie znaleziono kana≈Çu 'üíº„Éªpartnerstwa'.");
    }
  }
});

// Obs≈Çuga b≈Çƒôd√≥w
client.on('error', (error) => {
  console.error('B≈ÇƒÖd Discorda:', error);
});

process.on('unhandledRejection', (error) => {
  console.error('Nieobs≈Çu≈ºony b≈ÇƒÖd:', error);
});

// Logowanie do Discorda
client.login(process.env.DISCORD_TOKEN);
